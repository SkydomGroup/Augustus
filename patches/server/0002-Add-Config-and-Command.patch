From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chosen_1st <haizhongdelan@outlook.com>
Date: Sat, 18 Nov 2023 19:28:01 +0800
Subject: [PATCH] Add Config and Command


diff --git a/src/main/java/cc/skydom/server/chosen/AugustusConfig.java b/src/main/java/cc/skydom/server/chosen/AugustusConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..76eb1771a3e15a3d53a67dfd3a819369b058ee6b
--- /dev/null
+++ b/src/main/java/cc/skydom/server/chosen/AugustusConfig.java
@@ -0,0 +1,191 @@
+package cc.skydom.server.chosen;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import cc.skydom.server.chosen.command.AugustusCommand;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class AugustusConfig {
+    protected static final String HEADER = "This is the main configuration file for Augustus.";
+    // + "*\n"
+    protected static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    protected static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        init(configFile, true);
+    }
+
+    public static void reload(File configFile) {
+        init(configFile, false);
+    }
+
+    private static void init(File configFile, boolean setup) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        if (configFile.exists()) {
+            try {
+                config.load(CONFIG_FILE);
+            } catch (InvalidConfigurationException ex){
+                Bukkit.getLogger().log(Level.SEVERE, "Could not load augustus.yml, please correct your syntax errors", ex);
+                throw Throwables.propagate(ex);
+            } catch (IOException ignore) {
+            }
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+        verbose = getBoolean("verbose", false);
+
+        version = getInt("config-version", 1);
+        set("config-version", 1);
+
+        commands = new HashMap<>();
+        commands.put("augustus", new AugustusCommand("augustus"));
+
+        readConfig(AugustusConfig.class, null, setup);
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Augustus", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance, boolean setup) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    if (method.getName().endsWith("Setup") && !setup) continue;
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    protected static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    protected static String getString(String path, String def, String... comment) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def, String... comment) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def, String... comment) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def, String... comment) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List getList(String path, T def, String... comment) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def, String... comment) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    protected static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    protected static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    protected static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    protected static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    protected static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+}
diff --git a/src/main/java/cc/skydom/server/chosen/AugustusWorldConfig.java b/src/main/java/cc/skydom/server/chosen/AugustusWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..ef1a898740f6c73a979a782ae40ee1827fb1f96b
--- /dev/null
+++ b/src/main/java/cc/skydom/server/chosen/AugustusWorldConfig.java
@@ -0,0 +1,135 @@
+package cc.skydom.server.chosen;
+
+import org.apache.commons.lang.BooleanUtils;
+import org.bukkit.World;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.List;
+import java.util.Map;
+import java.util.function.Predicate;
+
+@SuppressWarnings("unused")
+public class AugustusWorldConfig {
+
+    private final String worldName;
+    private final World.Environment environment;
+
+    public AugustusWorldConfig(String worldName, World.Environment environment) {
+        this.worldName = worldName;
+        this.environment = environment;
+        init();
+    }
+
+    public void init() {
+        init(true);
+    }
+
+    public void reload() {
+        init(false);
+    }
+
+    private void init(boolean setup) {
+        AugustusConfig.log("-------- World Settings For [" + worldName + "] --------");
+        AugustusConfig.readConfig(AugustusWorldConfig.class, this, setup);
+    }
+
+    private void set(String path, Object val) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, val);
+        AugustusConfig.config.set("world-settings.default." + path, val);
+        if (AugustusConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            AugustusConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            AugustusConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    protected ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = AugustusConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : AugustusConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    protected String getString(String path, String def, String... comment) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getString("world-settings." + worldName + "." + path, AugustusConfig.config.getString("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, boolean def, String... comment) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getBoolean("world-settings." + worldName + "." + path, AugustusConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, Predicate<Boolean> predicate, String... comment) {
+        String val = getString(path, "default", comment).toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    protected double getDouble(String path, double def, String... comment) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getDouble("world-settings." + worldName + "." + path, AugustusConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    protected int getInt(String path, int def, String... comment) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getInt("world-settings." + worldName + "." + path, AugustusConfig.config.getInt("world-settings.default." + path));
+    }
+
+    protected <T> List<?> getList(String path, T def, String... comment) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getList("world-settings." + worldName + "." + path, AugustusConfig.config.getList("world-settings.default." + path));
+    }
+
+    protected Map<String, Object> getMap(String path, Map<String, Object> def, String... comment) {
+        final Map<String, Object> fallback = getMap("world-settings.default." + path, def, comment);
+        final Map<String, Object> value = getMap("world-settings." + worldName + "." + path, null, comment);
+        return value.isEmpty() ? fallback : value;
+    }
+
+    protected String getString(String path, String def) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getString("world-settings." + worldName + "." + path, AugustusConfig.config.getString("world-settings.default." + path));
+    }
+
+    protected boolean getBoolean(String path, boolean def) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getBoolean("world-settings." + worldName + "." + path, AugustusConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    protected double getDouble(String path, double def) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getDouble("world-settings." + worldName + "." + path, AugustusConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    protected int getInt(String path, int def) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getInt("world-settings." + worldName + "." + path, AugustusConfig.config.getInt("world-settings.default." + path));
+    }
+
+    protected <T> List<?> getList(String path, T def) {
+        AugustusConfig.config.addDefault("world-settings.default." + path, def);
+        return AugustusConfig.config.getList("world-settings." + worldName + "." + path, AugustusConfig.config.getList("world-settings.default." + path));
+    }
+
+    protected Map<String, Object> getMap(String path, Map<String, Object> def) {
+        final Map<String, Object> fallback = getMap("world-settings.default." + path, def);
+        final Map<String, Object> value = getMap("world-settings." + worldName + "." + path, null);
+        return value.isEmpty() ? fallback : value;
+    }
+
+    public boolean safeteleporting = true;
+    public boolean sandduping = false;
+    public boolean tripwireupdate = false;
+    public boolean preventdestroyingunbreakableblocks = true;
+
+    private void Settings() {
+        safeteleporting = getBoolean("settings.safe-teleportation", safeteleporting);
+        sandduping = getBoolean("settings.sand-duping", sandduping);
+        tripwireupdate = getBoolean("settings.tripwire-update", tripwireupdate);
+        preventdestroyingunbreakableblocks = getBoolean("settings.prevent-destroying-unbreakable-blocks", preventdestroyingunbreakableblocks);
+    }
+}
diff --git a/src/main/java/cc/skydom/server/chosen/command/AugustusCommand.java b/src/main/java/cc/skydom/server/chosen/command/AugustusCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d4e244b8ab91a5e0b046ad6f19c8528085680a8
--- /dev/null
+++ b/src/main/java/cc/skydom/server/chosen/command/AugustusCommand.java
@@ -0,0 +1,65 @@
+package cc.skydom.server.chosen.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+import net.md_5.bungee.api.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import cc.skydom.server.chosen.AugustusConfig;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class AugustusCommand extends Command {
+    public AugustusCommand(String name) {
+        super(name);
+        this.description = "Augustus related commands";
+        this.usageMessage = "/augustus [ reload / version ]";
+        this.setPermission("bukkit.command.augustus");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            AugustusConfig.reload((File) console.options.valueOf("augustus-settings"));
+            for (ServerLevel level : console.getAllLevels()) {
+                level.augustusConfig.reload();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Augustus config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index a2f71a6d1a9e98133dff6cd0f625da9435a8af14..f0d0544c03c94080fcb2e7c5ae566d08cd6b5661 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -242,7 +242,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("Augustus", mapAsJSON(Bukkit.spigot().getAugustusConfig(), null)) // Augustus - Add Config and Command
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index cf605aa56adf7f80d3b409f60a92a5ca7ae8fd07..bb2a0cafbc86e34120b1d4eeb78813f021080605 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -218,6 +218,15 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         thread.start(); // Paper - start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this);
         com.destroystokyo.paper.Metrics.PaperMetrics.startMetrics();
+        // Augustus start - Add Config and Command
+        try {
+            cc.skydom.server.chosen.AugustusConfig.init((java.io.File) options.valueOf("augustus-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        cc.skydom.server.chosen.AugustusConfig.registerCommands();
+        // Augustus end - Add Config and Command
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 2354a0e5d15e9be633d9fe3a1a9feefe7b9b7782..ef906caa9163cdd3d92d7ac32d62a2cd99e9a6f2 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -176,6 +176,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     // Paper end
 
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
+    public final cc.skydom.server.chosen.AugustusWorldConfig augustusConfig; // Augustus - Add Config and Command
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
     private org.spigotmc.TickLimiter entityLimiter;
@@ -213,6 +214,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - Async-Anti-Xray - Pass executor
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper
+        this.augustusConfig = new cc.skydom.server.chosen.AugustusWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Augustus - Add Config and Command
         this.generator = gen;
         this.world = new CraftWorld((ServerLevel) this, gen, biomeProvider, env);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 428426e1144bca014e3524158c2cbe1cd37244ef..6e9fabbb363513b2bbd7261f6bbc7caf59859826 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1041,6 +1041,7 @@ public final class CraftServer implements Server {
 
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
+        cc.skydom.server.chosen.AugustusConfig.init((File) console.options.valueOf("augustus-settings")); // Augustus - Add Config and Command
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
@@ -1056,6 +1057,7 @@ public final class CraftServer implements Server {
                 }
             }
             world.spigotConfig.init(); // Spigot
+            world.augustusConfig.init(); // Augustus - Add Config and Command
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -1071,6 +1073,7 @@ public final class CraftServer implements Server {
         this.reloadData();
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
+        cc.skydom.server.chosen.AugustusConfig.registerCommands(); // Augustus - Add Config and Command
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2978,6 +2981,13 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        // Augustus start - Add Config and Command
+        @Override
+        public YamlConfiguration getAugustusConfig() {
+            return cc.skydom.server.chosen.AugustusConfig.config;
+        }
+        // Augustus end - Add Config and Command
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 2af0068ef338634d1f44532af5db66c2d0b3dd10..b59d9822e3b9132cc5c1b6f79301d84d4d7a4901 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -173,6 +173,14 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Augustus start - Add Config and Command
+                acceptsAll(asList("augustus", "augustus-settings"), "File for augustus settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("augustus.yml"))
+                    .describedAs("Yml file");
+                // Augustus end - Add Config and Command
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
