From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chosen_1st <haizhongdelan@outlook.com>
Date: Fri, 29 Sep 2023 16:45:22 +0800
Subject: [PATCH] Toggle Protect Bedrock and End Portal Frames from being
 destroyed


diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 45243249a561440512ef2a620c60b02e159c80e2..7ae60f31efdcae6164b51d67fcc8eee5000479dc 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -483,7 +483,11 @@ public class Explosion {
                             BlockState iblockdata = cachedBlock.blockState;
                             // Paper end - optimise explosions
 
-                            if (!iblockdata.isDestroyable()) continue; // Paper
+                            // Augustus start - Toggle Protect Bedrock and End Portal Frames from being destroyed
+                            if (this.level.augustusConfig.preventdestroyingunbreakableblocks) {
+                                if (!iblockdata.isDestroyable()) continue; // Paper
+                            }
+                            // Augustus end - Toggle Protect Bedrock and End Portal Frames from being destroyed
                             // Paper - optimise explosions
 
                             // Paper - optimise explosions
@@ -703,7 +707,8 @@ public class Explosion {
                 }
                 // CraftBukkit end
 
-                if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
+                // Augustus start - Toggle Protect Bedrock and End Portal Frames from being destroyed
+                if (!this.level.augustusConfig.preventdestroyingunbreakableblocks && !iblockdata.isAir()) {
                     BlockPos blockposition1 = blockposition.immutable();
 
                     this.level.getProfiler().push("explosion_blocks");
@@ -729,7 +734,36 @@ public class Explosion {
                     this.level.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 3);
                     block.wasExploded(this.level, blockposition, this);
                     this.level.getProfiler().pop();
+                } else {
+                    if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
+                        BlockPos blockposition1 = blockposition.immutable();
+
+                        this.level.getProfiler().push("explosion_blocks");
+                        if (block.dropFromExplosion(this)) {
+                            Level world = this.level;
+
+                            if (world instanceof ServerLevel) {
+                                ServerLevel worldserver = (ServerLevel) world;
+                                BlockEntity tileentity = iblockdata.hasBlockEntity() ? this.level.getBlockEntity(blockposition) : null;
+                                LootParams.Builder lootparams_a = (new LootParams.Builder(worldserver)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
+
+                                if (yield < 1.0F) { // CraftBukkit - add yield
+                                    lootparams_a.withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / yield); // CraftBukkit - add yield
+                                }
+
+                                iblockdata.spawnAfterBreak(worldserver, blockposition, ItemStack.EMPTY, flag2);
+                                iblockdata.getDrops(lootparams_a).forEach((itemstack) -> {
+                                    Explosion.addBlockDrops(objectarraylist, itemstack, blockposition1);
+                                });
+                            }
+                        }
+
+                        this.level.setBlock(blockposition, Blocks.AIR.defaultBlockState(), 3);
+                        block.wasExploded(this.level, blockposition, this);
+                        this.level.getProfiler().pop();
+                    }
                 }
+                // Augustus end - Toggle Protect Bedrock and End Portal Frames from being destroyed
             }
 
             objectlistiterator = objectarraylist.iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 5acf0e1fba2967e67bdb208ef73ae8fa84ffe35d..4ff48681c5da28ef497a8552d9194ef38f34db48 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -199,12 +199,16 @@ public class PistonBaseBlock extends DirectionalBlock {
     @Override
     public boolean triggerEvent(BlockState state, Level world, BlockPos pos, int type, int data) {
         Direction enumdirection = (Direction) state.getValue(PistonBaseBlock.FACING);
-        // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
-        Direction directionQueuedAs = Direction.from3DDataValue(data & 7); // Paper - copied from below
-        if (!io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits && enumdirection != directionQueuedAs) {
-            return false;
+        // Augustus start - Toggle Protect Bedrock and End Portal Frames from being destroyed
+        if (world.augustusConfig.preventdestroyingunbreakableblocks) {
+            // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
+            Direction directionQueuedAs = Direction.from3DDataValue(data & 7); // Paper - copied from below
+            if (!io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits && enumdirection != directionQueuedAs) {
+                return false;
+            }
+            // Paper end - prevent retracting when we're facing the wrong way
         }
-        // Paper end - prevent retracting when we're facing the wrong way
+        // Augustus end - Toggle Protect Bedrock and End Portal Frames from being destroyed
         BlockState iblockdata1 = (BlockState) state.setValue(PistonBaseBlock.EXTENDED, true);
 
         if (!world.isClientSide) {
@@ -245,7 +249,13 @@ public class PistonBaseBlock extends DirectionalBlock {
             }
             // Paper end
             world.setBlock(pos, iblockdata2, 20);
-            world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pos, iblockdata2, (BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(data & 7)), enumdirection, false, true)); // Paper - diff on change
+            // Augustus start - Toggle Protect Bedrock and End Portal Frames from being destroyed
+            if (!world.augustusConfig.preventdestroyingunbreakableblocks) {
+                world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pos, iblockdata2, (BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(data & 7)), enumdirection, false, true));
+            } else {
+                world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pos, iblockdata2, (BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(data & 7)), enumdirection, false, true)); // Paper - diff on change
+            }
+            // Augustus end - Toggle Protect Bedrock and End Portal Frames from being destroyed
             world.blockUpdated(pos, iblockdata2.getBlock());
             iblockdata2.updateNeighbourShapes(world, pos, 2);
             if (this.isSticky) {
@@ -281,14 +291,20 @@ public class PistonBaseBlock extends DirectionalBlock {
                     }
                 }
             } else {
-                // Paper start - fix headless pistons breaking blocks
-                BlockPos headPos = pos.relative(enumdirection);
-                if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits || world.getBlockState(headPos) == Blocks.PISTON_HEAD.defaultBlockState().setValue(FACING, enumdirection)) { // double check to make sure we're not a headless piston.
-                    world.removeBlock(headPos, false);
+                // Augustus start - Toggle Protect Bedrock and End Portal Frames from being destroyed
+                if (!world.augustusConfig.preventdestroyingunbreakableblocks) {
+                    world.removeBlock(pos.relative(enumdirection), false);
                 } else {
-                    ((ServerLevel)world).getChunkSource().blockChanged(headPos); // ... fix client desync
+                    // Paper start - fix headless pistons breaking blocks
+                    BlockPos headPos = pos.relative(enumdirection);
+                    if (io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits || world.getBlockState(headPos) == Blocks.PISTON_HEAD.defaultBlockState().setValue(FACING, enumdirection)) { // double check to make sure we're not a headless piston.
+                        world.removeBlock(headPos, false);
+                    } else {
+                        ((ServerLevel)world).getChunkSource().blockChanged(headPos); // ... fix client desync
+                    }
+                    // Paper end - fix headless pistons breaking blocks
                 }
-                // Paper end - fix headless pistons breaking blocks
+                // Augustus end - Toggle Protect Bedrock and End Portal Frames from being destroyed
             }
 
             world.playSound((Player) null, pos, SoundEvents.PISTON_CONTRACT, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
diff --git a/src/main/java/org/skydom/server/chosen/AugustusWorldConfig.java b/src/main/java/org/skydom/server/chosen/AugustusWorldConfig.java
index 33b1d1ac84ef74abf9f3acde8e4f1a6b8c690c26..378458897c24fd4863b74e4baadabff15346c2bc 100644
--- a/src/main/java/org/skydom/server/chosen/AugustusWorldConfig.java
+++ b/src/main/java/org/skydom/server/chosen/AugustusWorldConfig.java
@@ -124,10 +124,12 @@ public class AugustusWorldConfig {
     public boolean safeteleporting = true;
     public boolean sandduping = false;
     public boolean tripwireupdate = false;
+    public boolean preventdestroyingunbreakableblocks = true;
 
     private void Settings() {
         safeteleporting = getBoolean("settings.safe-teleportation", safeteleporting);
         sandduping = getBoolean("settings.sand-duping", sandduping);
         tripwireupdate = getBoolean("settings.tripwire-update", tripwireupdate);
+        preventdestroyingunbreakableblocks = getBoolean("settings.prevent-destroying-unbreakable-blocks", preventdestroyingunbreakableblocks);
     }
 }
